/* Copyright(C) 2015 Interactive Health Solutions, Pvt. Ltd.

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 3 of the License (GPLv3), or any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Interactive Health Solutions, info@ihsinformatics.com
You can also access the license on the internet at the address: http://www.gnu.org/licenses/gpl-3.0.html

Interactive Health Solutions, hereby disclaims all copyright interest in this program written by the contributors. */
package org.irdresearch.tbreach.mobile.ui;


import javax.microedition.lcdui.ChoiceGroup;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.DateField;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Item;
import javax.microedition.lcdui.ItemCommandListener;
import javax.microedition.lcdui.ItemStateListener;
import javax.microedition.lcdui.StringItem;
import javax.microedition.lcdui.TextField;

import org.irdresearch.tbreach.mobile.constants.ErrMsg;
import org.irdresearch.tbreach.mobile.constants.XmlStrings;
import org.irdresearch.tbreach.mobile.model.FormType;
import org.irdresearch.tbreach.mobile.util.DateTimeUtil;
import org.irdresearch.tbreach.mobile.util.StringUtil;

import java.util.Hashtable;

public class PatientRegistration extends BaseTBReachForm implements CommandListener, ItemCommandListener, ItemStateListener{
	
	TextField participantID;
	TextField participantIDConfirm;
	DateField startTreatment;
	TextField healthWorkerID;
	TextField homePhoneNo;
	TextField phoneNumber1;
	TextField addressStreet;
	TextField addressDistrict;
	TextField addressHouse;
	TextField addressFlat;
	TextField firstNameField;
	TextField lastNameField;
	DateField dobField;
	ChoiceGroup gender;
	ChoiceGroup nominateFamilyVolunteer;
	ChoiceGroup relationshipFamilyVolunteer;
	ChoiceGroup maritalStatus;
	ChoiceGroup education;
	ChoiceGroup incomeFamilyMember;
	StringItem endOfForm;
	Command		cmdOK;
	Command		cmdBack;
	Item[]		formItems;
	TextField relationshipOther;
	private 	Hashtable queryData;
	
	
	

	public PatientRegistration( String title , TBReachMainMIDlet tbrMidlet ) {
		super( title , tbrMidlet );
		
		participantID = null;
		participantIDConfirm = null;
		
		startTreatment = null;
		healthWorkerID = null;
		phoneNumber1 = null;
		addressStreet = null;
		addressDistrict = null;
		addressHouse = null;
		addressFlat = null;
		firstNameField = null;
		lastNameField = null;
		dobField = null;
		gender = null;
		nominateFamilyVolunteer = null;
		relationshipFamilyVolunteer = null;
		maritalStatus = null;
		education = null;
		incomeFamilyMember = null;
		cmdOK = null;
		cmdBack = null;
		relationshipOther = null;
		
	}
	
	public Hashtable getQueryData ()
	{
		return queryData;
	}

	public void setQueryData (Hashtable queryData)
	{
		this.queryData = queryData;
	}
	
	public void init()
	{
		
		healthWorkerID = new TextField( "–õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–¥—Ä–∞–±–æ—Ç–Ω–∏–∫–∞" , tbrMidlet.getCurrentUserId() , 10 , TextField.UNEDITABLE);
		participantID = new TextField( "–†–µ–≥–∏—?—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞" , "" , 8 , TextField.NUMERIC );
		participantIDConfirm = new TextField( "–†–µ–≥–∏—?—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å)" , "" , 8 , TextField.NUMERIC );
		startTreatment = new DateField( "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ª–µ—á–µ–Ω–∏—?  (YYYY-MM-DD)" ,  DateField.DATE);
		
		homePhoneNo = new TextField( "–?–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—? —?–≤—?–∑–∏" , "" , 25  , TextField.NUMERIC );
		phoneNumber1 = new TextField( "–?–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—? –°–ú–°" , "" , 25  , TextField.NUMERIC );

		addressStreet = new TextField( "–?–¥—Ä–µ—?: —É–ª–∏—Ü–∞" , "" , 25  , TextField.ANY );
		addressStreet.setInitialInputMode("UCB_CYRILLIC"); 
		addressDistrict = new TextField( "–?–¥—Ä–µ—?: –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω" , "" , 25 , TextField.ANY );
		addressDistrict.setInitialInputMode("UCB_CYRILLIC"); 
		addressHouse = new TextField( "–?–¥—Ä–µ—?: –Ω–æ–º–µ—Ä –¥–æ–º–∞" , "" , 20 , TextField.ANY );
		addressHouse.setInitialInputMode("UCB_CYRILLIC");
		addressFlat = new TextField( "–?–¥—Ä–µ—?: –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã" , "" , 20 , TextField.ANY );
		addressFlat.setInitialInputMode("UCB_CYRILLIC");
		
		firstNameField = new TextField("–ò–º—?" , "" , 20 , TextField.ANY );
		firstNameField.setInitialInputMode("UCB_CYRILLIC");
		lastNameField = new TextField("–§–∞–º–∏–ª–∏—?" , "" , 20 , TextField.ANY );
		lastNameField.setInitialInputMode("UCB_CYRILLIC");
		dobField = new DateField( "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—? (YYYY-MM-DD)" ,  DateField.DATE);
		
		gender = new ChoiceGroup( "–ü–æ–ª" , ChoiceGroup.POPUP );
		gender.append("–ú—É–∂" , null);
		gender.append("–ñ–µ–Ω" , null);
		
		nominateFamilyVolunteer = new ChoiceGroup ("–ò–º–µ–µ—Ç—?—? –ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä?",ChoiceGroup.POPUP);
		nominateFamilyVolunteer.append ("–î–∞", null);
		nominateFamilyVolunteer.append ("–?–µ—Ç", null);
		
		relationshipFamilyVolunteer = new ChoiceGroup( "–ö–µ–º –≤–æ–ª–æ–Ω—Ç–µ—Ä —?–≤–ª—?–µ—Ç—?—? –¥–ª—? –ø–∞—Ü–∏–µ–Ω—Ç–∞?" , ChoiceGroup.POPUP );
		relationshipFamilyVolunteer.append( "–°—ã–Ω/–¥–æ—á—å" , null );
		relationshipFamilyVolunteer.append( "–ú–∞—Ç—å/–æ—Ç–µ—Ü" , null );
		relationshipFamilyVolunteer.append( "–ë—Ä–∞—Ç/—?–µ—?—Ç—Ä–∞" , null );
		relationshipFamilyVolunteer.append( "–°—É–ø—Ä—É–≥/—?—É–ø—Ä—É–≥–∞" , null );
		relationshipFamilyVolunteer.append( "–ë–∞–±—É—à–∫–∞/–¥–µ–¥—É—à–∫–∞" , null );
		relationshipFamilyVolunteer.append( "–í–Ω—É–∫/–≤–Ω—É—á–∫–∞" , null );
		relationshipFamilyVolunteer.append( "–¢–µ—Ç—?/–¥—?–¥—?" , null );
		relationshipFamilyVolunteer.append( "–î–≤–æ—é—Ä–æ–¥–Ω–∞—? —?–µ—?—Ç—Ä–∞/–±—Ä–∞—Ç" , null );
		relationshipFamilyVolunteer.append( "–î—Ä—É–≥–∏–µ" , null );
		
		relationshipOther = new TextField( "–£–∫–∞–∂–∏—Ç–µ –µ—?–ª–∏ –¥—Ä—É–≥–æ–µ." , "" , 25 , TextField.ANY);
		
		maritalStatus = new ChoiceGroup( "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" , ChoiceGroup.POPUP );
		maritalStatus.append( "–?–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º" ,null );
		maritalStatus.append( "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º" ,null );
		maritalStatus.append( "–†–∞–∑–≤–µ–¥–µ–Ω/–∞" ,null );
		maritalStatus.append( "–ñ–∏–≤—É —Ä–∞–∑–¥–µ–ª—å–Ω–æ" ,null );
		maritalStatus.append( "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞" ,null );
		maritalStatus.append( "–?–µ—Ç –æ—Ç–≤–µ—Ç–∞" ,null );
		
		education = new ChoiceGroup( "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" , ChoiceGroup.POPUP );
		education.append( "–î–æ—à–∫–æ–ª—å–Ω–æ–µ" ,null );
		education.append( "–?–∞—á–∞–ª—å–Ω–∞—? —à–∫–æ–ª–∞" ,null );
		education.append( "–°—Ä–µ–¥–Ω—?—? —à–∫–æ–ª–∞" ,null );
		education.append( "–°—Ä–µ–¥–Ω–µ–µ —?–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ" ,null );
		education.append( "–í—ã—?—à–µ–µ" ,null );
		education.append( "–?–µ—Ç" ,null );
		
		incomeFamilyMember = new ChoiceGroup( "–î–æ—Ö–æ–¥ –Ω–∞ 1 —á–ª–µ–Ω–∞ —?–µ–º—å–∏ –≤ –º–µ—?—?—Ü" , ChoiceGroup.POPUP );
		incomeFamilyMember.append( "–î–æ 100 —?–æ–º–æ–Ω–∏" ,null );
		incomeFamilyMember.append( "–î–æ 200 —?–æ–º–æ–Ω–∏" ,null );
		incomeFamilyMember.append( "–î–æ 300 —?–æ–º–æ–Ω–∏" ,null );
		incomeFamilyMember.append( "–ë–æ–ª–µ–µ 400 —?–æ–º–æ–Ω–∏" ,null );
		incomeFamilyMember.append( "–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞" ,null );
		
		endOfForm = new StringItem( "–ö–æ–Ω–µ—Ü —Ñ–æ—Ä–º—ã" , "" );
		
		cmdOK = new Command( "–°–∞–±—Ç" , Command.OK , 1 );
		cmdBack = new Command( "–ë–∞ –∞–≤–≤–∞–ª" , Command.BACK , 2 );

		Item items[] = {healthWorkerID , participantID, participantIDConfirm , startTreatment, homePhoneNo,  phoneNumber1 ,
		         addressStreet ,
				addressDistrict, addressHouse, addressFlat, firstNameField, lastNameField, dobField, gender, nominateFamilyVolunteer, relationshipFamilyVolunteer, relationshipOther,  maritalStatus, education, incomeFamilyMember , endOfForm  };
		formItems = items;
		addCommand( cmdOK );
		addCommand( cmdBack );

		startDate = DateTimeUtil.getDate();
		startTime = DateTimeUtil.getTime();
		initialShow();
		setCommandListener( this );
		setItemStateListener( this );
	}
	
	private void show(Item item) {
		int i = indexOf( item );
		delete( i );
		insert( i , item );
	}
	
	private int indexOf(Item item) {
		for (int i = 0; i < formItems.length; i++)
			if (formItems[i] == item)
				return i;
		return -1;
	}


	private void hide(Item item) {
		int i = indexOf( item );
		delete( i );
		StringItem tmp = new StringItem( "" , "" );
		insert( i , tmp );
	}

	public void itemStateChanged(Item i) {
		int indexx = 8;
		
		
		if(i == relationshipFamilyVolunteer)
		{
			if(relationshipFamilyVolunteer.getSelectedIndex() == indexx)
			{
				show(relationshipOther);
			}
			else
			{
				hide(relationshipOther);
			}
		}
		
		/*if(i == nominateFamilyVolunteer)
		{
			if(nominateFamilyVolunteer.getSelectedIndex() == 0)
			{
				show(relationshipFamilyVolunteer);
			}
			else
			{
				hide(relationshipFamilyVolunteer);
				hide(relationshipOther);
			}
		}*/
	}
	

	private void initialShow() {
		
		for (int i = 0; i < formItems.length; i++)
			append( formItems[i] );
		
		hide( relationshipOther );
		hide (nominateFamilyVolunteer);
		
	}
	
	private boolean validate()
	{
		boolean result = true;
		String error = "–ò—?–ø—Ä–∞–≤—å—Ç–µ –≤—?–µ –æ—à–∏–±–∫–∏: \n";
		if(participantID.getString().equals( "" ) || participantIDConfirm.getString().equals( "" ))
		{
			error = error + "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞. \n";
			//tbrMidlet.showAlert ("Participant id(s) can't be empty.", null);
			result = false;
		}else
		
		if (!participantIDConfirm.getString ().equals (participantID.getString ())){
			error = error + "–?–æ–º–µ—Ä–∞ –Ω–µ —?–æ–≤–ø–∞–¥–∞—é—Ç. \n";
			//tbrMidlet.showAlert ("IDs do not match", null);
			result = false;
		}	
		
		/* if(addressHouse.getString().equals( "" ) || addressDistrict.getString().equals( "" ) || addressFlat.getString().equals( "" ) || addressStreet.getString().equals( "" )){
			error = error + "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—?. \n";
			//tbrMidlet.showAlert ("IDs do not match", null);
			result = false;
		}*/
		
		if (startTreatment.getDate() == null){
			error = error + "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ª–µ—á–µ–Ω–∏—?. \n";
			//tbrMidlet.showAlert ("Please fill start treatment Date", null);
			result = false;
		}else if (DateTimeUtil.isDateInFuture( startTreatment.getDate() )){
			error = error + "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ª–µ—á–µ–Ω–∏—? \n";
			//tbrMidlet.showAlert ("Please fill valid date!", null);
			result = false;
		}
		
		if(homePhoneNo.getString().equals( "" ) || phoneNumber1.getString().equals( "" ))
		{
			error = error + "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n";
			//tbrMidlet.showAlert ("Please fill in phone number", null);
			result = false;			
		}
		
		if(firstNameField.getString().equals("") || lastNameField.getString().equals(""))
		{
			error = error + "–£–∫–∞–∂–∏—Ç–µ –∏–º—? \n";
			//tbrMidlet.showAlert ("Please fill in complete name", null);
			result = false;			
		}
			/*if((!StringUtil.isAlpha( firstNameField.getString())) && (!StringUtil.isAlpha( firstNameField.getString()))){
				tbrMidlet.showAlert ("Please fill in correct name", null);
				result = false;				
			}*/
		
		if(dobField.getDate() == null)
		{
			error = error + "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—? \n";
			//tbrMidlet.showAlert ("Please fill in date of Birth", null);
			result = false;			
		}else if (DateTimeUtil.isDateInFuture( dobField.getDate() )){
			error = error + "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—? \n";
			//tbrMidlet.showAlert ("Please fill valid date!", null);
			result = false;
		}
		
		if(!result){
			tbrMidlet.showAlert (error, null);
		}
		return result;
	}

	public void commandAction(Command c , Item arg1) {
		
		System.out.println("INSIDE commandAction ITEM!");
		
	}

	public void commandAction(Command c , Displayable d) {
		
		if (c == cmdOK) {
			if(validate()){
			
			endTime = DateTimeUtil.getTime();
			String request = createRequestPayload();
			System.out.println( request );
			Hashtable model = tbrMidlet.sendToServer( request );
			
			if (model != null) {
				String status = (String) model.get( "status" );
				String uniqueID = (String) model.get( "uniqueID" );

				if (status.equals( XmlStrings.SUCCESS )) {
					System.out.println( "success" );
					
						deleteAll();
						removeCommand( cmdOK );
						removeCommand( cmdBack );
						init();
						tbrMidlet.showAlert("–î–∞–Ω–Ω—ã–µ —?–æ—Ö—Ä–∞–Ω–µ–Ω—ã!" , null );


				}
				else if (status.equals( XmlStrings.ERROR )) {
					String msg =  (String) model.get( "msg" );
					String russianMsg = ErrMsg.getTajikErrorMessage( msg );
					tbrMidlet.showAlert(russianMsg , null );
				}
			}
			}
			
		}
		
		else if (c == cmdBack) {
			deleteAll();
			removeCommand( cmdOK );
			removeCommand( cmdBack );
			tbrMidlet.setDisplay( prevDisplayable );
		}
	}
	
	public String createRequestPayload()
	{
		String request = "";
		request = "type=" + FormType.PATIENT_REGISTRATION;
		request += "&parId=" + participantID.getString();
		request += "&sdate=" + DateTimeUtil.getDate( startTreatment.getDate() );
		request += "&startdate=" + startDate;
		request += "&stime=" + startTime;
		request += "&etime=" + endTime;
		request += "&homephonenumber=" + homePhoneNo.getString();
		request += "&phone1=" + phoneNumber1.getString();
		request += "&street=" + addressStreet.getString();
		request += "&district=" + addressDistrict.getString();
		request += "&house=" + addressHouse.getString();
		request += "&flat=" + addressFlat.getString();
		request += "&firstname=" + firstNameField.getString();
		request += "&lastname=" + lastNameField.getString();
		request += "&dob=" + DateTimeUtil.getDate( dobField.getDate() );
		request += "&gender=" + gender.getString( gender.getSelectedIndex() );
		request += "&nominatevolunteer=" + nominateFamilyVolunteer.getString( nominateFamilyVolunteer.getSelectedIndex() );
		request += "&relationship=" + relationshipFamilyVolunteer.getString( relationshipFamilyVolunteer.getSelectedIndex() );
		request += "&relationother=" + relationshipOther.getString();
		request += "&maritalstatus=" + maritalStatus.getString( maritalStatus.getSelectedIndex() );
		request += "&education=" + education.getString( education.getSelectedIndex() );
		request += "&incomeFamilyMember=" + incomeFamilyMember.getString( incomeFamilyMember.getSelectedIndex() );
		request += "&healthWorker=" + healthWorkerID.getString();
		
		return request;
		
	}

}
